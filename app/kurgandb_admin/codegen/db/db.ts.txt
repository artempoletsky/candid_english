import { Predicate, queryUniversal } from "@artempoletsky/kurgandb";
import type { PlainObject, Table } from "@artempoletsky/kurgandb/globals";
import type * as types from "./globals";


$$TABLES$$


export async function query<Payload extends PlainObject, ReturnType>(predicate: Predicate<Tables, Payload, ReturnType>, payload?: Payload) {
  return queryUniversal<Payload, ReturnType, Tables>(predicate, payload);
}


export function methodFactory<Payload extends PlainObject, PredicateReturnType, ReturnType = PredicateReturnType>(predicate: Predicate<Tables, Payload, PredicateReturnType>, then?: (dbResult: PredicateReturnType) => ReturnType) {
  return async function (payload?: Payload) {
    const dbResult = await query(predicate, payload);
    if (!then) return dbResult;
    return then(dbResult);
  }
}
